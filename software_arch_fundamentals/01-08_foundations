--------------------------------------------------------------------
| CONTENTS                                                         |
--------------------------------------------------------------------

I. Introduction
    > 1. Introduction

II. Foundations
    > 2. Architectural Thinking
    > 3. Modularity
    > 4. Architecture Characteristics Defined
    > 5. Identifying Architectural Characteristics
    > 6. Measuring and Governing Architectural Characteristics
    > 7. Scope of Architecture Characteristics
    > 8. Component-Based Thinking

III. Architecture Styles
    > 9. Foundations
    > 10. Layered Architecture Style
    > 11. Pipeline Architecture Style
    > 12. Microkernel Architecture Style
    > 13. Service-Based Architecture Style
    > 14. Event-Driven Architecture Style
    > 15. Space-Based Architecture Style
    > 16. Orchestration-Driven Service-Oriented Architecture
    > 17. Microservices Architecture
    > 18. Choosing the Appropriate Architecture Style

IV. Techniques and Soft Skills
    > 19. Architecture Decisions
    > 20. Analyzing Architecture Risk
    > 21. Diagramming and Presenting Architecture
    > 22. Making Teams Effective
    > 23. Negotiation and Leadership Skills
    > 24. Developing a Career Path





--------------------------------------------------------------------
| 1. INTRO                                                         |
--------------------------------------------------------------------

- 4 Dimensions of architecture
    1. Characteristics = nonfunctional requirements (ie scalability)
    2. Structure = style of implementation (ie microservices)
    3. Decisions = rules for how a system should be constructed (ie only service can access DB)
    4. Principles = guidelines rather than rules (ie use REST between services)

- Archicture Characteristics
    - Availability
    - Reliability
    - Testability
    - Scalability
    - Security
    - Agility
    - Fault Tolerance
    - Elasciticy
    - Recoverability
    - Performance
    - Deployability
    - Learnability

- Expectations of an Architect
    1. Make architecture decisions
    2. Continually analyze the architecture
    3. Keep current with the latest trends
    4. Ensure compliance with decisions
    5. Diverse exposure and expreience
    6. Have business domain knowledge
    7. Possess interpersonal skills
    8. Understand and navigate politics

- Milestones
    - XP (1996) = agile principles and test-first
    - 'Continuous Delivery' (2010) = automation, testing, CI, single source of truth

- Architecture Concerns
    - Requirements
    - Auditability
    - Performance
    - Security
    - Data
    - Legality
    - Scalability

- New Additions to Architecture Discipline
    - Engineering Practices
    - DevOps now included
    - Process
    - Data (and the increasingly complex set of data options)

- Laws of Software Architecture
    1. Everything in software architecture is a trade-off.
    C. If you don't see the trade-off, you haven't discovered it yet.
    2. Why is more important than how.





--------------------------------------------------------------------
| 2. ARCHITECTURAL THINKING                                        |
--------------------------------------------------------------------

- Switching from technical depth to breadth is one of the hardest parts of making
    the transition from a developer to an architect.

- Tradoffs Example
    - Send message to topic
                                        Bid Capture
                                     /
         Bid Producer ---->  Topic  --  Bid Tracking
                                     \ 
                                        Bid Analytics

         A change can be made in a single place and services are decoupled.  However, 
           the lack of monitoring information exposed makes it harder to auto-scale.  
           Also, there might be security issues since anyone can subscribe.

    - Send messages to separate AMQP queues

                            Queue ----> Bid Capture
                         / 
         Bid Producer ----> Queue ----> Bid Tracking
                         \
                            Queue ----> Bid Analytics

         Changes have to be made in multiple places.  Also, we have to send multiple
           messages if multiple services need to be notified of an event.  But, it 
           is easier to control subscribers and get monitoring information.

- An architect must do hands-on coding regularly.  It is usually a good idea for them
    not to be the blocker on a critical change.





--------------------------------------------------------------------
| 3. MODULARITY                                                    |
--------------------------------------------------------------------

- History of Modular Reuse
    - Dijkstra's 'Goto Statement Considered Harmful' (1967)
    - Structured Languages like C and Pascal (Early 1970s)
    - Modular languages like Modula and Ada (Mid 1970s)
    - OOP languages (Early 1980s)

- Cohesion = related parts should be packaged together
    - Dividing a cohesive module would result in increased coupling, decreased readability
    - Automated checker can look at which instance variables used by which methods

- Example of Tradeoff

    - One module

        Customer Maintenance
          > add customer
          > update customer
          > get customer
          > notify customer
          > get customer orders
          > cancel customer orders

    - Split into 2 modules

        Customer Maintenance
          > add customer
          > update customer
          > get customer
          > notify customer

        Order Maintenance
          > get customer orders
          > cancel customer orders

- Coupling = Can be analyzed by looking at cyclomatic complexity in the call graph

- Abstractness = ratio of abstract types to concrete

- Instability = ratio of outgoing coupling to outgoing and incoming coupling

- Connascence = changing one requirement involves changing other components to
                  maintain correctness of the system

- Using Connascence to Improve Modularity
    1. Minimize overall connascence by breaking system into encapsulated elements
    2. Minimize remaining connascence that crosses encapsulation boundaries
    3. Maximize connascence within encapsulation boundaries





--------------------------------------------------------------------
| 4. ARCHITECTURAL CHARACTERISTICS                                 |
--------------------------------------------------------------------

- An architectural characteristic

    1. Specifies a nondomain (aka nonfunctional) design consideration
    2. Influences some structural aspect of the design
    3. Is critical or important to application success

- Operational Characteristics
    - Availability
    - Continuity (disaster recovery capability)
    - Performance (stress testing, response times, etc)
    - Recoverability (backups and duplicated hardware)
    - Reliability/Safety (will people die?)
    - Robustness (will it keep working if power or internet fails?)
    - Scalability

- Structural Characteristics
    - Configurability
    - Extensibility
    - Installability
    - Localization
    - Maintainability
    - Portability
    - Reusability
    - Supportability
    - Upgradability

- Cross-Cutting Architectural Characteristics
    - Accessibility
    - Archivability
    - Authentication
    - Authorization
    - Legal
    - Privacy
    - Security (encryption at rest, encryption in transit, remote access)
    - Supportability
    - Usability

- Tradeoffs and Least Worst Architecture
    - ie Security degrades Performance
    - Can usually support only a handful of characteristics in one system





--------------------------------------------------------------------
| 5. IDENTIFYING ARCHITECTURAL CHARACTERISTICS                     |
--------------------------------------------------------------------

- Architects uncover architectural characteristics by:
    1. Extracting from domain concerns
    2. Extracting from requirements
    3. Extracting from implicit domain knowledge

- There are several architecture katas websites that are great for practicing 
    translating domain requirements to architectural priorities.


- Examples of translating domain concerns to architectural characteristics   

    Domain Concerns                Architecture characteristics
    ----------------------------------------------------------------------------
    Mergers and acquisitions       Interoperability, scalability, adaptability, 
                                     extensibility

    Time to market                 Agility, testability, deployability

    User satisfaction              Performance, availability, fault tolerance, 
                                     testability, deployability, agility, security

    Competitive advantage          Agility, testability, deployability, scalability, 
                                     availability, fault tolerance

    Time and budget                Simplicity, feasibility


- Security is an example of an explicit characteristic in every system.  No one wants
    to create insecure software.  However, it must always be balanced against other
    priorities.

  Performance is another one.  No one wants to visit a slow website, but performance is
    a nuanced concept and this must also be balanced against other priorities.


- There are no wrong answers in architecture, only expensive ones!





--------------------------------------------------------------------
| 6. MEASURING & GOVERNANCE                                        |
--------------------------------------------------------------------

- Problems with defining architectural definitions
    1. They aren't physics
    2. Wildly varying definitions
    3. Too composite

- Operational measurements are things that can be measured directly.
    - Response times
    - Time until webpage rendering starts
    - First CPU idle on mobile
    - Outlier requests that take longer
    - Statistical analysis that drills down further instead of only looking at mean

- Structural measurements like modularity are harder to measure.
    - Cyclomatic complexity can be measured by creating a graph of all the function
        calls and see which classes/functions have too many decision points.

- Process measurements are for things associated with the development process.
    - Code coverage
    - Percentage of successful deployments
    - How long deployments take

- Fitness Function = objective assessment of some architecture characteristic
    - Check for cyclic dependencies (ie JDepend)
    - Distance from the main sequence (also JDepend)
    - Unit tests for architecture keep bad designs out of code base (ie ArchUnit)

- Netflix's Simian Army
    - Conformity Monkey = checks for architectural governance rules
    - Security Monkey = checks each service for well-known security defects
    - Janitor Monkey = looks for instances no service routes to anymore, can be decommed
    - Chaos Monkey = high latency situations, data centers going down, etc.

- 'The Checklist Manifesto' by Atul Gawande





--------------------------------------------------------------------
| 7. SCOPE OF ARCHITECTURAL CHARACTERISTICS                        |
--------------------------------------------------------------------

- 'Building Evolutionary Architectures' by Ford, Kua, Parsons

- We can't think of scalability only at the level of the entire system any more.  We must
    think about the scalability of individual components, including databases.

- Connascence = 2 components are connascent if a change in one component requires making
                  changes to the other

    - Static connascence = discoverable by static analysis tools
    - Dynamic connascence = synchronous for request/response, asynchronous for event-driven

- Functional Cohesion = Many business concepts semantically bind parts of a system
                          together


- Architectural Quantum = An independently deployable artifact with high functional 
                            cohesion and synchronous connascence

    1. Independently Deployable

        - An architecture quantum includes all the necessary components to function
            independently from all other parts of the architecture.  For instance, if
            an application uses a database, it is part of the quantum, since the system
            won't function without it.

        - This means that virtually all legacy systems deployed using a single database
            have a quantum of 1.

    2. High Functional Cohesion

        - Cohesion refers to how well the contained code is unified in purpose. For 
            instance, a 'Customer' component with all properties and methods related
            to a customer entity has high cohesion, whereas a 'Utility' component with
            a random collection of methods would not.

        - 'High Functional Cohesion' implies that the quantum does something purposeful.

    3. Synchronous Connascence

        - This refers to synchronous calls within an application context or between 
            distributed services that form the quantum.

        - For example, if one service calls another one synchronously, the services need
            to be scaled up together.  They cannot have extreme differences in architectural
            characteristics.

        - For another example, if an 'Auction' service sent the winning user to a 'Payment'
            service after the auction is over, and the payment service is backed up, one
            call might go through while the others time out.  Using a message queue to 
            create asynchronous connascence might be a better idea.


- 'Domain Driven Design' by Eric Evans
    - Bounded context
    - We want reuse, but shared artifacts create a host of problems such as coupling
    - Recognize that each entity works best within a localized context


- Example - Auction Site
    - Quanta #1: Bidder Feedback - Encompasses the bid stream and video stream of bids
    - Quanta #2: Auctioneer - The live auctioneer
    - Quanta #3: Bidder - Online bidders and bidding





--------------------------------------------------------------------
| 8. COMPONENT-BASED THINKING                                      |
--------------------------------------------------------------------

- Physical components = jar files in Java, dll in .NET, gems in Ruby
                      = same address space as callers, communicate via function calls
                      = compile-time dependencies

- Components also appear as layers or subsystems (ie services communicating via TCP or REST).


- Architecture Partitioning Examples
 
    Layered Architecture            Modular Monolith

       ---------                  ---------------------
       | Layer |                  |  Module   Module  |
       | Layer |                  |  Module   Module  |
       | Layer |                  |  Module   Module  |
       | Layer |                  ---------------------
       ---------                            ^
           ^                                |
           |                                v
           v                                DB
           DB


- Top-Level Partitioning Examples

    Technical Partitioning          Domain Partitioning

       -------------------       ----------------------------------------
       |  Presentation   |       |  CatalogCheckout    UpdateInventory  |
       |  Business Rules |       |  ShipToCustomer     Reporting        |
       |  Service        |       |  Analytics          UpdateAccounts   |
       |  Persistence    |       ----------------------------------------
       -------------------                          ^
                ^                                   |
                |                                   v
                v                                   DB
                DB


- Domain Partitioning

    Advantages:
      - Models how business functions
      - Easier to build cross-functional teams around domains
      - Aligns more closely with modular monolith and microservices architectures
      - Message flow matches problem domain
      - Easy to migrate to distributed architecture

    Disadvantage:
      - Customization code appears in multiple places


- Technical Partitioning (ie MVC)

    Advantages:
      - Clearly separates customizable code
      - Aligns more closely with layered architecture pattern

    Disadvantages:
      - Higher degree of global coupling, changing the 'Common' component affects all others
      - Domain concepts may have to be duplicated in multiple layers
      - Higher coupling at the data level (ie a single database)


- Component Granularity
    - Too fine-grained will lead to too much communication between components to get results
    - Too coarse-grained will encourage high internal coupling, testing and deployment problems

- Entity Trap Anti-Pattern

    - Take all database entities and create a 'Manager' for each one
    - For example, 
        [AuctionManager] Create auctions, Browse auctions, Schedule auctions
        [ItemManager] Create item, Display item, Upload item
        [BidManager] Place bids, Display bids, Track bids
    - This is what things like .NET NakedObjects, Java Isis, Rails scaffolding do automatically