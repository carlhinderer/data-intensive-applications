--------------------------------------------------------------------
| 9. FOUNDATIONS                                                   |
--------------------------------------------------------------------

- Fundamental Pattern #1: Big Ball of Mud

    - The absence of any discernable architectural structure
    - Unregulated growth and expedient repair
    - Problems in deployment, testability, scalability, performance


- Fundamental Pattern #2: Unitary Architecture

    - Originally, from the mainframe days, all software ran on a single computer
    - Today only typically seen in embedded systems and other highly constrained environments


- Fundamental Pattern #3: Client-Server

    - 2-tier architecture with several flavors over time
    - Flavor A: Desktop application that connects to a DB server
    - Flavor B: Web browser with web server (2-tier even though web server and DB might be separate)
    - Flavor C: 3-Tier (Industrial grade DB server, application server, client with JavaScript)

    - Java was created during the rise of the 3-tier architecture.  C++ (the dominant 
        language at the time) developers complained about how difficult it was to move objects 
        over the network in a consistent way between systems.  So Java built 'serialization' right
        into the language, providing a 'serialization' interface for each object.  This is rarely
        used today, and does cause some backwards compatibility issues.


- Common Monolithic and Distributed Patterns

    [Monolithic = single deployment unit of all code]

    1. Layered architecture
    2. Pipeline architecture
    3. Microkernel architecture

    [Distributed = multiple deployments connected through remote access protocols]

    1. Service-based architecture
    2. Event-driven architecture
    3. Space-based architecture
    4. Service-oriented architecture
    5. Microservices architecture


- The Fallacies of Distributed Computing

    1. The network is reliable.
         - Timeouts and circuit breakers are used to mitigate issues

    2. Latency is zero.
         - Should look at mean, and also extremes of response times

    3. Bandwidth is infinite.
         - Need to think carefully about how much data to return with responses

    4. The network is secure.

    5. The topology never changes.
         - Architects have to be in constant contact with admins and operations

    6. There is only one administrator.

    7. Transport cost is zero.

    8. The network is homogeneous.


- Other Distributed Considerations

    - Distributed logging
        - Logging consolidation tools like Splunk can help with this

    - Distributed transactions
        - ACID is not possible
        - Eventual consistency
        - High performance, scalability, availability at the expense of data integrity and consistency
        - Transactional sagas utilize event sourcing to manage the state of a transaction
        - BASE transactions (Basic Availability, Soft state, Eventual consistency)

    - Contract maintenance and versioning





--------------------------------------------------------------------
| 10. LAYERED ARCHITECTURE STYLE                                   |
--------------------------------------------------------------------

- This is the de facto style for most applications due to simplicity, familiarity, low cost

- Follows Conway's Law, since most organizations consist of
    - UI developers
    - Backend developers
    - Rules developers
    - DBAs

- 'Accidental architecture' anti-pattern

- Typical Layers
    - Presentation Layer
    - Business Layer
    - Persistence Layer
    - Database Layer

- Technically partitioned, rather than domain partitioned
- Allows developers to leverage their particular technical expertise
- Lack of overall agility to respond to change

- Each layer can be replaced without affecting other layers, if there are well-defined contracts

- Open vs Closed - If the layers are closed, flow must go through each layer 
                     (layers cant be skipped)

- 'Architectural Sinkhole' anti-pattern = requests move through layers as pass-throughs without
     any business logic performed in each layer

- Strengths:
    - Good for small, simple applications
    - Good starting point
    - Low cost, simple, familiar
    - Ease of development
    - Lack of network traffic and latency

- Weaknesses:
    - Gets unruly as it gets bigger
    - Maintainability
    - Testability, need to mock and stub components all over the place
    - Agility
    - High-risk, infrequent deployments
    - Not elastic or scalable
    - Not fault-tolerant





--------------------------------------------------------------------
| 11. PIPELINE ARCHITECTURE STYLE                                  |
--------------------------------------------------------------------

- Best known as the underlying principle behind Unix shell languages like Bash and zsh

- Tools like MapReduce also use this style

- Quanta=1, since it is usually deployed as a monolith

- Pipes = unidirectional communication channels between filters
- Filters = self-contained, stateless, perform a single task

- 4 Types of Filters

    1. Producer = starting point (aka source)
    2. Transformer = transforms data and forwards it (aka map)
    3. Tester = accepts input and produces output based on test criteria (aka reduce)
    4. Consumer = termination point, may persist to database or display results on UI

- Unidirectional nature and simplicity encourage compositional reuse

- ETL tools leverage the pipeline architecture


- Example - Service Telemetry Information Sent From Services via streaming to Kafka

      Kafka  ->  Service Info Capture  ->  Duration Filter  ->  Uptime Filter  ->  End
      Topic           (producer)               (tester)             (tester)
                (subscribes to Kafka Topic)       |                    |
                                                  v                    v
                                        Duration Calculator     Uptime Calculator
                                            (transformer)         (transformer)
                                                      |            |
                                                      v            v
                                                     Database Output
                                                        (consumer)
                                                             |
                                                             v
                                                          MongoDB


- Strengths:
    - Simple and easy to understand, low cost
    - Lack of network traffic

- Weaknesses:
    - Still a monolith so deploying and testing are difficult
    - Not scalable or elastic
    - Not fault tolerant





--------------------------------------------------------------------
| 12. MICROKERNEL ARCHITECTURE STYLE                               |
--------------------------------------------------------------------

- Two simple architecture components: a core system and plug-in components

- Example
    - Core System = Eclipse IDE
    - Plug-ins = Eclipse plug-ins

- Keep components separate from the main processing flow.  To add a new component,
    all you have to do is plug in the new component and add it to the registry.

- Plug-in components are standalone, independent components that contain specialized
    processing, additional features, and custom code meant to enhance or extend the core
    system.

- Plug-ins should be independent of each other and ideally not have dependencies between
    them.

- Provides good component decoupling, allows for runtime changes, allows for
    asynchronous communication (good for UI responsiveness).  Makes deployment difficult
    while still having the problems of a monolith, and relies too much on the core system,
    though.

- If a plug-in needs access to the core system's database, it should access the data via
    the core system through an API.  However, a plug-in may also have it's own data store,
    either internal or external.

- A plug-in registry contains information about each plug-in module, including it's name,
    data contract, and remote access protocol details.  The registry could be as simple as 
    an internal dictionary or as complex as an external system like Apache ZooKeeper.

- The data contract between the plug-ins and core system are usually standard across a
    domain of plug-ins, and can be implemented as JSON, XML, or events passed between the
    plug-ins and core system.  Proprietary systems may implement their own contract structure.

- Common implementations of the plug-in architecture include:
    - IDEs
    - Web browsers
    - Tools like Jira and Jenkins
    - Insurance company software with a separate plug-in for each state
    - Tax preparation software with a separate plug-in for each state

- Strengths:
    - Simple and low cost
    - Can be both domain partitioned and technically partitioned
    - Good for platforms that require strong feature extensibility
    - More reliable since problems with a single plug-in won't crash entire system
    - Good modularity and extensibility

- Weaknesses:
    - Not scalable, elastic, or fault tolerant





--------------------------------------------------------------------
| 13. SERVICE-BASED ARCHITECTURE STYLE                             |
--------------------------------------------------------------------

- Basic topology is a separately deployed user interface, separately deployed remote
    coarse-grained services, and a single monolithic database.


             --------------------------------------
             |           User Interface           |
             --------------------------------------
              |           |         |           |
              v           v         v           v
            Component  Component  Component  Component
                 |         |          |        |
                 v         v          v        v
                -----------------------------------
                |             Database            |
                -----------------------------------


- Services are 'domain services' which are independently and separately deployed.
    Since they share a single database, there are typically 4-12 of them.

- In most cases, there is a single instance of each service.  However, there may be
    multiple instances for scalability or fault tolerance reasons.  If there multiple
    instances, some kind of load balancing will be needed.

- Typically, services are accessed by the user interface through REST calls, but 
    messaging, RPC calls, or SOAP may also be used.

- While an API layer consisting of a proxy or gateway can be used to access services from 
    the user interface (or other external requests), in most cases the user interface 
    accesses the services directly using a service locator pattern embedded within the 
    user interface, API gateway, or proxy.

- There may be multiple user interfaces, each connecting to a different service.  There may
    also be multiple databases, each for different services.  In these cases, we need to 
    make sure data in one database isn't needed by another service, because we want to
    avoid any inter-service communication and duplication of data.


- It is also possible to add an API layer consisting of a reverse proxy or gateway between
    the user interface and services.  This can be good for consolidating cross-cutting 
    concerns such as metrics, security, auditing, service discovery.

                             User Interface
                            |    |    |    |
                            v    v    v    v
                      API Layer (Gateway or Proxy)
                            |    |    |    |
                            v    v    v    v
                          Comp Comp  Comp Comp
                            |    |    |    |
                            v    v    v    v
                                Database


- Each individual service is typically designed using a layered architecture.

         API Facade Layer
         Business Logic Layer
         Persistence Layer

- For example, a single request ('Checkout') to the 'OrderService' will place an order, 
    generate an order id, apply the payment, and update the inventory for each item 
    ordered.  In contrast, in a microservices approach, these steps would involve 
    several services.

- Because services are coarse-grained, ACID transcations involving commits and rollbacks
    are used to ensure database integrity within a single service.  In contrast, in a
    microservices approach, fine-grained services and BASE transactions are used.


- For example, for the same request in a microservices architecture,

    1. The 'OrderPlacement' service accepts the request, creates the order, generates an
         order id, and inserts the order into the order tables.

    2. The order service then makes a call to the 'PaymentService', which tries to apply the
         payment.  If the payment cannot be applied due to an expired credit card, then 
         the order cannot be placed and the data is in an inconsistent state.

    3. In this case, what should we do about the inventory?  Should we mark it as ordered and
         decrement it?  Should we let another customer buy the item?  Should we hold it for
         some amount of time to let the first customer update their credit card?


- Domain services allow for better data integrity and consistency.  However, making a change
    in any part of the processing requires testing the entire coarse-grained service.

- When multiple services share the same database, schema changes can be difficult to deal with.
    Typically, this is dealt with by creating a shared data access library used by all the 
    services.  The problem with this is that every service needs to be redeployed with the
    new version of the library on every schema change.

- One way to solve this issue is to logically partition the database, create a separate library
    for each partition, and then you only have to redeploy services that use the schema that
    changed.

- Strengths:
    - Security, fault tolerance, and scalability
    - Agility, testability, and deployability
    - Domain-partitioned architecture
    - One service going down won't impact other services
    - Simple and cheap compared to other distributed architectures
    - Less network traffic compared to other distributed architectures

- Weaknesses
    - Quanta=1 if there is only a single DB
    - Usually only 1 instance of each service, so the individual services aren't fault tolerant

- This is a good choice if you want a measure of fault tolerance and scalability, but
    don't need the capacity of a microservices approach.  You get ACID transactions, which
    make the system easy to reason about, as long as you don't outgrow the relational DB.

- Sometimes, the UI or API layer will need to coordinate 2 or more services.  In this case,
    you'd need to rely on sagas or BASE transactions.


- You get a good level of architectural modularity without having to get tangled up in the
    complexity of more granular services.  As services start getting more fine-grained, issues
    surrounding orchestration and choreography start to appear.

    Orchestration = coordination of multiple services through the use of a separate mediator
                      service that controls and manages the workflow of a transaction 
                      (like the conductor in an orchestra)

    Choreography = coordination of multiple services by which each service talks to one another
                     without the use of a central mediator (like a dance)

  As services get more fine-grained, both orchestration and choreography are necessary to tie
    the services together to complete the business transaction.





--------------------------------------------------------------------
| 14. EVENT-DRIVEN ARCHITECTURE STYLE                              |
--------------------------------------------------------------------

--------------------------------------------------------------------
| 15. SPACE-BASED ARCHITECTURE STYLE                               |
--------------------------------------------------------------------

--------------------------------------------------------------------
| 16. ORCHESTRATION-DRIVEN SERVICE-ORIENTED ARCHITECTURE           |
--------------------------------------------------------------------

--------------------------------------------------------------------
| 17. MICROSERVICES ARCHITECTURE                                   |
--------------------------------------------------------------------

--------------------------------------------------------------------
| 18. CHOOSING THE APPROPRIATE ARCHITECTURE STYLE                  |
--------------------------------------------------------------------