------------------------------------------------------------
CHAPTER 1 - DATA WAREHOUSING PRIMER
------------------------------------------------------------

- Goals of Data Warehousing

    1. The DW/BI system must make information easily accessible.

         - Content must intuitive and obvious to the business user, not just the develop.
         - Data structures and labels should mimic the business users' thought process and vocabulary.
         - Applications must be simple and easy to use.
         - Queries must return results with minimal wait times.


    2. The DW/BI system must present information consistently.

         - Data must be carefully assembled, cleaned, QA'ed, and released only when fit for users.
         - Common labels and definitions should be used across all data sources.
         - Two performance measurements that have the same name should mean the same thing.


    3. The DW/BI system must adapt to change.

         - The system must be designed to handle inevitable change gracefully.
         - Existing data and applications should not be disrupted when new questions or new data arise.
         - If data must be changed, the changes must be transparent to users.


    4. The DW/BI system must present information in a timely way.

         - Raw data may need to be converted into actionable information in hours, minutes, or seconds.
         - The DW/BI team and business users need to have realistic expectations for real-time data.


    5. The DW/BI system must be a secure bastion that protects the information assets.

         - The organization's informational crown jewels are stored in the data warehouse.
         - The system must effectively control access to the organization's confidential information.


    6. The DW/BI system must be the authoritative and trustworthy foundation for improved decision making.

         - The system must have the right information to support decision making.
         - The original name for a DW/BI system was a 'Decision Support System'.


    7. The business community must accept the DW/BI system to deem it successful.

         - If the business community doesn't use the system, it has failed the acceptance test.
         - Business users will embrace the system if it is simple, fast, and provides useful information.



- Dimensional Modeling

    - Dimensional modeling is widely accepted as the preferred technique for presenting analytic data.
        It addresses 2 simultaneous requirements:

        1. Deliver data that's understandable to the business users
        2. Deliver fast query performance


    - An executive may describe her business as "We sell products in various markets and measure our
        performance over time."  It is intuitive to think of such a business as a cube, with the
        axes labeled 'product', 'market', and 'time'.  


    - Normalized 3NF structures, correlated with ER diagrams, are immensely useful in operational
        processing because an update or insert transaction only touches the database in one place.
        Normalized models, however, are too complicated for BI queries.  Likewise, most RDBMS's
        can't effectively query a normalized model, because the complexity of users' unpredictable
        queries overwhelms the database optimizers.



- Star Schemas vs OLAP Cubes

    - Dimensional models implemented in RDBMS's are referred to as 'star schemas' because of their
        resemblance to a star-like structure.


                 Market Dimension             Date Dimension
                                  \        /
                                     Sales  
                                     Facts  ---   Product Dimension


    - Dimensional models implemented in multidimensional DB environments are referred to as 'OLAP Cubes'.


                            |    /
                            |   /
                            |  /
                    Market  | / Product
                            |/
                            -----------
                             Date


    - Both stars and cubes have a common logical design with recognizable dimensions.  However, the 
        physical implementation differs.  When data is loaded into an OLAP cube, it is stored and indexed
        using techniques designed for dimensional data.


    - The downside of using OLAP cubes is that you pay a load performance price for the OLAP query
        capabilities.  For this reason, most multidimensional modeling is done with relational star
        schemas.



- OLAP Cube Deployment Considerations

    - A star schema hosted in a RDBMS is a good physical foundation for building an OLAP cube, and
        is a more stable basis for backup and recovery.

    - OLAP cubes have performance advantages over time, but RDBMS's have been catching up.

    - OLAP cubes are more variable across vendors than RDBMS's, making them harder to port.

    - OLAP cubes tend to have more fine-grained security options.

    - OLAP cubes offer significantly richer analysis capabilities.



- Fact Tables for Measurements

    - The 'fact table' is a dimensional model that store the performance measurements resulting from
        an organization's business process events.  You should strive to store the low-level measurement
        data resulting from a business process in a single dimensional model.


    - Because measurement data is overwhelmingly the largest set of data, it should not be replicated
        in multiple places for multiple organizational functions around the enterprise.  Allowing
        business users from multiple organizations to access a single centralized repository for each
        set of measurement data ensures consistent data throughout the enterprise.


    - The term 'fact' represents a business measure.  For example, a purchase at a retail store
        translates into:

          Retail Sales Facts
          ------------------
          Date Key (FK)
          Product Key (FK)
          Store Key (FK)
          Promotion Key (FK)
          Customer Key (FK)
          Clerk Key (FK)
          Transaction #
          Sales Dollars
          Sales Units


    - Each row in the fact table corresponds to a measurement event.  The data on each row is at a 
        specific level of detail, referred to as the 'grain', such as one row per product sold on a 
        sales transaction.  Having the discipline to create fact tables with a single level of detail
        ensures that measurements aren't double counted.

      The idea that a measurement event in the physical world has a one-to-one relationship to a single
        row in the corresponding fact table is a bedrock principle for dimensional modeling.  Everything
        else builds from this foundation.


    - Facts are often described as continuously valued to help sort out what is a fact vs what is a
        dimension attribute.  The dollar sales amount fact is continuously valued in this example.

      Measured facts are rarely textual.  In most cases, a textual measurement is drawn from a discrete
        list of values.  Unless the text is unique for every row in the fact table, it belongs in the
        dimension table.


    - Despite being sparse, fact tables usually make up 90% or more of the total space consumed by the
        dimensional model.


    - All fact table grains fall into one of 3 categories:

        1. Transaction
        2. Periodic Snapshot
        3. Accumulating Snapshot

      Transaction grain fact tables are the most common.


    - All fact tables have 2 or more foreign keys that connect to dimension tables primary keys.  For
        example, the product key in the fact table always matches a specific product key in the product
        dimension table.


    - The fact table generally has its own primary key composed of a subset of the foreign keys.  This
        key is often called a 'composite key'.  